#!/bin/bash

# based on http://ruleoftech.com/2013/weblogic-server-auto-restart-with-node-manager-as-linux-service

SERVICE_NAME=`/bin/basename $0`
PROCESS_STRING="^.*{{ fmw_path }}/.*-Dweblogic.Name=AdminServer.*"
RETVAL=0

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

startAdminServer() {
	echo "Starting AdminServer"
	cd $DIR/wlst/
	{{ wl_home }}/common/bin/wlst.sh startAdminServer.py
	RETVAL=$?
}

stopAdminServer() {
	echo "Stopping AdminServer"
	cd $DIR/wlst/
        {{ wl_home }}/common/bin/wlst.sh stopAdminServer.py
	RETVAL=$?
}

restartAdminServer() {
	echo "Restarting AdminServer"
	cd $DIR/wlst/
        {{ wl_home }}/common/bin/wlst.sh restartAdminServer.py
	RETVAL=$?
}

case "$1" in
        'start')
                startAdminServer
        ;;
        'stop')
                stopAdminServer
        ;;
        'restart')
                restartAdminServer
        ;;
        'status')
		OLDPID=`/usr/bin/pgrep -f $PROCESS_STRING`
                if [ "$OLDPID" != "" ]; then
                        echo "$SERVICE_NAME is running (pid: $OLDPID)"
                else
                        echo "$SERVICE_NAME is stopped"
                fi
                RETVAL=$?
        ;;
        *)
        echo "Usage: $0 start|stop|restart|status"
        exit 1
        ;;
esac

exit $RETVAL
