[ENGINE]

#DO NOT CHANGE THIS.
Response File Version=1.0.0.0.0

[GENERIC]

#Provide true to create a new weblogic domain. WebLogic Server must already be installed.
CREATE_NEW_DOMAIN={{ idm.config.CREATE_NEW_DOMAIN if ( (idm.config.CREATE_NEW_DOMAIN is defined) and ( idm_config_IS_MASTER ) ) else 'false' }}

#Provide true to extend domain. WebLogic Server must already be installed and the domain must be up and running.
USE_EXISTING_DOMAIN={{ idm.config.USE_EXISTING_DOMAIN if idm.config.USE_EXISTING_DOMAIN is defined else 'false' }}

#Provide true to configure components without domain.
NO_DOMAIN={{ idm.config.NO_DOMAIN if idm.config.NO_DOMAIN is defined else 'true' }}

#Provide true to expand the clusters in domain. WebLogic Server must already be installed and the domain must be up and running.
EXTEND_CLUSTER={{ 'true' if ( ( idm.odsm is defined or idm.dip is defined ) and ( not idm_config_IS_MASTER ) ) else 'false' }}

#Domain name may only contain alphanumeric characters or the underscore (_) or hyphen (-) characters.
DOMAIN_NAME={{ idm.config.DOMAIN_NAME if ( (idm.config.DOMAIN_NAME is defined) and ( idm_config_IS_MASTER ) ) else '' }}

#Provide the User Name for WebLogic Domain. The value may only contain alphanumeric characters, or the underscore (_) or hyphen (-) characters.
DOMAIN_ADMINISTRATOR_USERNAME={{ idm.config.DOMAIN_ADMINISTRATOR_USERNAME if idm.config.DOMAIN_ADMINISTRATOR_USERNAME is defined else 'weblogic' }}

#Provide the password for WebLogic Domain. Valid passwords are 8 to 30 characters long, must begin with an alphabetic character, use only alphanumeric, underscore (_), dollar ($) or pound (#) characters and include at least one number.
DOMAIN_ADMINISTRATION_PASSWORD={{ idm.config.DOMAIN_ADMINISTRATION_PASSWORD if idm.config.DOMAIN_ADMINISTRATION_PASSWORD is defined else '<SECURE VALUE>' }}

#Confirm the WebLogic Domain password.
ADMINISTRATOR_PASSWORD_CONFIRM={{ idm.config.DOMAIN_ADMINISTRATION_PASSWORD if idm.config.DOMAIN_ADMINISTRATION_PASSWORD is defined else '<SECURE VALUE>' }}

#Provide the localhost name for Create Domain and machine name on which domain is up and running for Extend Domain and Expand Cluster.
DOMAIN_HOST_NAME={{ idm.config.DOMAIN_HOST_NAME if idm.config.DOMAIN_HOST_NAME is defined else inventory_hostname }}

#Provide the port in which domain is up and running. Required for Extend Domain and Expand Cluster.
DOMAIN_PORT_NO={{ idm.config.DOMAIN_PORT_NO if ( (idm.config.DOMAIN_PORT_NO is defined) and ( not idm_config_IS_MASTER ) ) else '' }}

#Give the complete path for an Oracle Home directory to be created. The Oracle Home directory name may only contain alphanumeric , hyphen (-) , dot (.) and underscore (_) characters, and it must begin with an alphanumeric character.
ORACLE_HOME={{ idm_home }}

#Give the complete path to a valid Middleware Home.
AS_HOME_LOCATION={{ fmw_home }}

{% if (idm.odsm is defined) or  (idm.dip is defined) %}
#Give the complete path to a valid WebLogic Server Home.
WL_HOME={{ idm.config.WL_HOME if idm.config.WL_HOME is defined else '' }}
{% endif %}

#Give the complete path for an Oracle Instance directory to be created. This is the location where the software configuration files and runtime processes will reside.
INSTANCE_HOME={{ idm.config.INSTANCE_HOME if idm.config.INSTANCE_HOME is defined else '' }}

#Give a name for Oracle Instance corresponding to the Instance Home. The Oracle Instance name may only contain alphanumeric and underscore (_) characters, it must begin with an alphabetic (a-z or A-Z) character, and must be from 4 to 30 characters in length.
INSTANCE_NAME={{ idm.config.INSTANCE_NAME if idm.config.INSTANCE_NAME is defined else '' }}

#Provide the My Oracle Support Username. If you wish to ignore Oracle Configuration Manager configuration provide empty string for user name.
MYORACLESUPPORT_USERNAME={{ idm.config.MYORACLESUPPORT_USERNAME if idm.config.MYORACLESUPPORT_USERNAME is defined else '' }}

#Provide the My Oracle Support Password
MYORACLESUPPORT_PASSWORD={{ idm.config.MYORACLESUPPORT_PASSWORD if idm.config.MYORACLESUPPORT_PASSWORD is defined else '<SECURE VALUE>' }}

#Set this to true if you wish to decline the security updates. Setting this to true and providing empty string for My Oracle Support username will ignore the Oracle Configuration Manager configuration
DECLINE_SECURITY_UPDATES={{ idm.config.DECLINE_SECURITY_UPDATES if idm.config.PROXY_HOST is defined else 'true' }}

#Set this to true if My Oracle Support Password is specified
SECURITY_UPDATES_VIA_MYORACLESUPPORT={{ idm.config.SECURITY_UPDATES_VIA_MYORACLESUPPORT if idm.config.PROXY_HOST is defined else 'false' }}

#Provide the Proxy Host
PROXY_HOST={{ idm.config.PROXY_HOST if idm.config.PROXY_HOST is defined else '' }}

#Provide the Proxy Port
PROXY_PORT={{ idm.config.PROXY_PORT if idm.config.PROXY_PORT is defined else '' }}

#Provide the Proxy Username
PROXY_USER={{ idm.config.PROXY_USER if idm.config.PROXY_USER is defined else '' }}

#Provide the Proxy Password
PROXY_PWD={{ idm.config.PROXY_USER if idm.config.PROXY_USER is defined else '<SECURE VALUE>' }}

{% if (idm.oid is defined or idm.ovd is defined) or ( ( idm.odsm is defined or idm.dip is defined ) and idm_config_IS_MASTER ) %}
#Give OID if Oracle Internet Directory is selected for configuration.
LIST_OF_COMPONENTS_FOR_SCHEMAS={{ 'OID:' if idm.oid is defined else '' }}
{% endif %}

#Set this to true if you want the configuration wizard to assign the ports automatically.
AUTOMATIC_PORT_DETECT={{ idm.config.AUTOMATIC_PORT_DETECT if idm.config.AUTOMATIC_PORT_DETECT is defined else 'false' }}

#Give the location for the file containing the list of static ports if you manually want to assign ports.
STATICPORT INI FILE LOCATION=/tmp/staticports.ini

{% if idm.dip is defined and idm_config_IS_MASTER  %}
#Enter the Oracle Internet Directory LDAP Server URL. Format - hostname:port. Give the LDAP SSL Port Number.
LDAP_URL={{ idm.dip.oid.host if idm.dip.oid.host is defined else 'localhost' }}:{{ idm.dip.oid.port if idm.dip.oid.port is defined else '3060' }}

#Provide the LDAP Server User Name. Example cn=orcladmin.
OID_USER={{ idm.dip.adminUser if idm.dip.adminUser is defined else 'cn=orcladmin' }}

#Provide the LDAP Server password.
OID_ADMIN_PASSWORD={{ idm.dip.passwords.admin if idm.dip.passwords.admin is defined else '<SECURE VALUE>' }}

#Provide true if DIP Schema version is 10g.
DIP_UPGRADE_FLAG={{ idm.config.DIP_UPGRADE_FLAG if idm.config.AUTOMATIC_PORT_DETECT is defined else 'false' }}

#Provide true to create a new metadata repository in the database provided by the user. The schema here refers to the ODS schema for OID.
CREATE_NEW_SCHEMA={{ idm.config.CREATE_NEW_SCHEMA if idm.config.AUTOMATIC_PORT_DETECT is defined else 'false' }}

#Provide true if component schema has already been created using Repository Creation Utility (RCU) into an available database. The schema here refers here to the ODS schema for OID.
USE_EXISTING_SCHEMA={{ idm.config.USE_EXISTING_SCHEMA if idm.config.AUTOMATIC_PORT_DETECT is defined else 'true' }}

#Enter the full path, listen port, and service name for the database, for example myserver.mycompany.com:1111:mydb1. Separate the path, port, and service name using a colon (:).
OID_DB_INFO={{ rcu.config.oracle_database_hostname if rcu.config.oracle_database_hostname is defined else 'localhost.localdomain' }}:{{ rcu.config.oracle_database_port  if rcu.config.oracle_database_port is defined else '1521' }}:{{ rcu.config.oracle_database_servicename if rcu.config.oracle_database_servicename is defined else 'orcl.vm.nbnco.local' }}

#Provide the database user name. The user must have SYSDBA user privileges in order to create the metadata repository.
CREATE_DATABASE_USERNAME=

#Provide the database password. The user must have SYSDBA user privileges in order to create the metadata repository.
CREATE_DATABASE_PASSWORD=<SECURE VALUE>

#Provide true if OID scheme version is 10g.
OID_UPGRADE_FLAG={{ idm.config.OID_UPGRADE_FLAG if idm.config.AUTOMATIC_PORT_DETECT is defined else 'false' }}

#Provide true to create OID Schema.
CREATE_OID_SCHEMA={{ idm.config.CREATE_OID_SCHEMA if idm.config.AUTOMATIC_PORT_DETECT is defined else 'false' }}

#Provide the OID schema name.
OID_SCHEMA_NAME=

#Provide true if ODS schema chosen is already being used by an existing OID . Please ensure that the system time on this Identity Management Node is in sync with the time on other Identity Management Nodes that are part of this Oracle Application Server Cluster (Identity Management) configuration. Failure to ensure this may result in unwanted instance failovers, inconsistent operational attributes in directory entries and potential inconsistent behaviour of password state policies.
IS_SECOND_OID_INSTALL=false

#Provide true if RAC database is used.
IS_OID_RACDB_INSTANCE_NAME_SPECIFIED=false
{% endif %}


{% if idm.ovd is defined %}
#Provide a password for a new account to connect to the Oracle Virtual Directory administrative service, cn=orcladmin. Use 5-30 characters. Use only alphanumerics, underscore (_), dollar ($), or pound (#). At least one number is required.
OVD_ADMIN_PASSWORD={{ idm.ovd.passwords.admin if idm.ovd is defined else '<SECURE VALUE>' }}

#Confirm the password of Oracle Virtual Directory administrative service.
CONFIRM_OVD_ADMIN_PASSWORD={{ idm.ovd.passwords.admin if idm.ovd is defined else '<SECURE VALUE>' }}

#Provide the base, or the leftmost entry, of the virtual directory namespace that Oracle Virtual Directory will use to set its initial Access Control Lists (ACLs). For example, for the namespace dc=mycompany,dc=com, you would enter dc=com.
OVD_LDAPv3_NAME_SPACE={{ idm.ovd.namespace if idm.ovd is defined else '' }}

#Provide true to enable the HTTP Web Gateway to be protected by SSL. Oracle highly recommends that you use SSL/TLS for Oracle Virtual Directory's administrative gateway service. Disabling SSL/TLS  could result in your server administration traffic being monitored and even compromised.
IS_ADMIN_SERVER_OF_OVD_IN_SECURE_MODE={{ idm.ovd.IS_ADMIN_SERVER_OF_OVD_IN_SECURE_MODE if idm.ovd.IS_ADMIN_SERVER_OF_OVD_IN_SECURE_MODE is defined else 'false' }}

#Provide true for securing HTTP client connection information. Give true if HTTP Web Gateway is set to true.
IS_HTTP_WEB_GATEWAY_OF_OVD_SECURE={{ idm.ovd.IS_HTTP_WEB_GATEWAY_OF_OVD_SECURE if idm.ovd.IS_HTTP_WEB_GATEWAY_OF_OVD_SECURE is defined else 'false' }}

#Provide true for Oracle Virtual Directory to be configured.
IS_LDAP_CLIENT_LISTENER_FOR_OVD_SELECTED={{ idm.ovd.IS_LDAP_CLIENT_LISTENER_FOR_OVD_SELECTED if idm.ovd.IS_LDAP_CLIENT_LISTENER_FOR_OVD_SELECTED is defined else 'false' }}

#Oracle Virtual Directory includes an HTML-based gateway that provides DSML and XSLT-rendered directory reporting. Provide true to enable HTML-based gateway.
IS_HTTP_WEB_GATEWAY_OF_OVD_SELECTED={{ idm.ovd.IS_HTTP_WEB_GATEWAY_OF_OVD_SELECTED if idm.ovd.IS_HTTP_WEB_GATEWAY_OF_OVD_SELECTED is defined else 'false' }}

#Specify a new Administrator User Name to connect to the Oracle Virtual Directory administrative service, For example, for the Administrator User Name you would enter cn=orcladmin.
OVD_ADMIN={{ idm.ovd.adminUser if idm.ovd is defined else 'cn=orcladmin' }}
{% endif %}

{% if idm.oid is defined %}
#Provide true to create a new metadata repository in the database provided by the user. The schema here refers to the ODS schema for OID.
CREATE_NEW_SCHEMA={{ idm.config.CREATE_NEW_SCHEMA if idm.config.CREATE_NEW_SCHEMA is defined else 'false' }}

#Provide true if component schema has already been created using Repository Creation Utility (RCU) into an available database. The schema here refers here to the ODS schema for OID.
USE_EXISTING_SCHEMA={{ idm.config.USE_EXISTING_SCHEMA if idm.config.USE_EXISTING_SCHEMA is defined else 'true' }}

#Enter the full path, listen port, and service name for the database, for example myserver.mycompany.com:1111:mydb1. Separate the path, port, and service name using a colon (:).
OID_DB_INFO={{ rcu.config.oracle_database_hostname if rcu.config.oracle_database_hostname is defined else 'localhost.localdomain' }}:{{ rcu.config.oracle_database_port  if rcu.config.oracle_database_port is defined else '1521' }}:{{ rcu.config.oracle_database_servicename if rcu.config.oracle_database_servicename is defined else 'orcl.vm.nbnco.local' }}

#Provide the database user name. The user must have SYSDBA user privileges in order to create the metadata repository.
CREATE_DATABASE_USERNAME={{ idm.config.CREATE_DATABASE_USERNAME if idm.config.CREATE_DATABASE_USERNAME is defined else '' }}

#Provide the database password. The user must have SYSDBA user privileges in order to create the metadata repository.
CREATE_DATABASE_PASSWORD={{ idm.oid.passwords.sys if idm.oid is defined else '<SECURE VALUE>' }}

#Provide true if OID scheme version is 10g.
OID_UPGRADE_FLAG={{ idm.config.OID_UPGRADE_FLAG if idm.config.OID_UPGRADE_FLAG is defined else 'false' }}

#Provide true to create OID Schema.
CREATE_OID_SCHEMA={{ idm.config.CREATE_OID_SCHEMA if idm.config.CREATE_OID_SCHEMA is defined else 'false' }}

#Provide the OID schema name.
OID_SCHEMA_NAME=ODS

#Provide true if ODS schema chosen is already being used by an existing OID . Please ensure that the system time on this Identity Management Node is in sync with the time on other Identity Management Nodes that are part of this Oracle Application Server Cluster (Identity Management) configuration. Failure to ensure this may result in unwanted instance failovers, inconsistent operational attributes in directory entries and potential inconsistent behaviour of password state policies.
IS_SECOND_OID_INSTALL={{ 'true' if ( not idm_config_IS_MASTER ) else 'false' }}

#Provide true if RAC database is used.
IS_OID_RACDB_INSTANCE_NAME_SPECIFIED={{ idm.config.IS_OID_RACDB_INSTANCE_NAME_SPECIFIED if idm.config.IS_OID_RACDB_INSTANCE_NAME_SPECIFIED is defined else 'false' }}

{% if (idm.oid is defined and idm_config_IS_MASTER ) %}
#Provide the DN of the top node for storing component data in the directory. This can be a realm, or the top node of a branch, instead of the top node of the directory.
OID_NAMESPACE={{ idm.oid.namespace if idm.oid is defined else 'dc=example,dc=com' }}

#Provide a 5-30 character password for OID server administrator. Use only alphanumerics, underscore (_), dollar ($), or pound (#). At least one number is required.
OID_ADMIN_PASSWORD={{ idm.oid.passwords.admin if idm.oid is defined else '<SECURE VALUE>' }}

#Confirm OID Administrator password.
OID_ADMIN_CONFIRM_PASSWORD={{ idm.oid.passwords.admin if idm.oid is defined else '<SECURE VALUE>' }}

#Provide Oracle Internet Directory Server user name.
OID_USER={{ idm.config.OID_USER if idm.config.OID_USER is defined else 'cn=orcladmin' }}
{% endif %}
{% endif %}

[SYSTEM]


[APPLICATIONS]
{% if (idm.oid is defined or idm.ovd is defined) or ( ( idm.odsm is defined or idm.dip is defined ) and idm_config_IS_MASTER ) %}
#Provide true if configuring in a clustered environment.
IS_CLUSTER_CONFIGURATION={{ idm.config.IS_CLUSTER_CONFIGURATION if idm.config.IS_CLUSTER_CONFIGURATION is defined else 'false' }}
{% endif %}

[RELATIONSHIPS]

{% if ( idm.odsm is defined and ( not idm_config_IS_MASTER ) ) %}
#Provide true if extending the Oracle Identity Federation cluster.
EXTEND_OIF_CLUSTER=false

#Provide true if extending the Oracle Directory Service cluster.
EXTEND_ODS_CLUSTER=true
{% endif %}

#Provide true to configure Oracle Internet Directory.
CONFIGURE_OID_COMPONENT={{ 'true' if idm.oid is defined else 'false' }}

#Provide true to configure Oracle Directory Integration Platform.
CONFIGURE_DIP_COMPONENT={{ 'true' if idm.dip is defined else 'false' }}

#Provide true to configure Oracle Virtual Directory.
CONFIGURE_OVD_COMPONENT={{ 'true' if idm.ovd is defined else 'false' }}

#Provide true to configure Oracle Identity Fedration.
CONFIGURE_OIF_COMPONENT={{ 'true' if idm.oif is defined else 'false' }}

#Provide true to configure Oracle Http Server.
CONFIGURE_OHS_COMPONENT={{ 'true' if idm.ohs is defined else 'false' }}

#Provide true to configure Oracle Directory Service Manager.
CONFIGURE_ODSM_COMPONENT={{ 'true' if idm.odsm is defined else 'false' }}

#Provide true to configure Enterprise Management.
CONFIGURE_EM_COMPONENT={{ 'true' if ( (idm.em is defined ) and ( idm_config_IS_MASTER ) ) else 'false' }}

#Provide true to configure federation components.
FEDERATION_COMPONENTS_FOR_CONFIGURE={{ idm.config.FEDERATION_COMPONENTS_FOR_CONFIGURE if idm.config.FEDERATION_COMPONENTS_FOR_CONFIGURE is defined else 'false' }}

#Provide true to configure management components.
MANAGEMENT_COMPONENTS_FOR_CONFIGURE={{ idm.config.MANAGEMENT_COMPONENTS_FOR_CONFIGURE if idm.config.MANAGEMENT_COMPONENTS_FOR_CONFIGURE is defined else 'false' }}

{% if (idm.oid is defined or idm.ovd is defined) or ( ( idm.odsm is defined or idm.dip is defined ) and idm_config_IS_MASTER ) %}
#Provide the list of components selected for configuration separated by colon. Example OID:OVD:DIP:ODSM
SELECTED_COMPONENTS_FOR_CONFIGURATION={{ 'OID:' if idm.oid is defined else '' }}{{ 'DIP:' if idm.dip is defined else ''}}{{ 'OVD:' if idm.ovd is defined else '' }}{{ 'OIF:' if idm.oif is defined else '' }}{{ 'OHS:' if idm.ohs is defined else '' }}{{ 'ODSM:' if idm.odsm is defined else '' }}{{ 'EM:' if idm.em is defined else '' }}
{% endif %}

{% if ( idm.dip is defined and idm_config_IS_MASTER ) %}
#Enter the full path, listen port, and service name for the database, for example myserver.mycompany.com:1111:mydb1. Separate the path, port, and service name using a colon (:).
OID_DB_INFO={{ rcu.config.oracle_database_hostname if rcu.config.oracle_database_hostname is defined else 'localhost.localdomain' }}:{{ rcu.config.oracle_database_port  if rcu.config.oracle_database_port is defined else '1521' }}:{{ rcu.config.oracle_database_servicename if rcu.config.oracle_database_servicename is defined else 'orcl.vm.nbnco.local' }}

#Provide the database OID schema name.
OID_DB_USER=ODSSM

#Provide the database ODSSM schema name
ODSSM_DB_USER=ODSSM

#Provide the ODS schema password.
ODS_PASSWORD={{ idm.dip.passwords.odssm if idm.dip is defined else '<SECURE VALUE>' }}

#Provide the ODSSM schema password.
ODSSM_PASSWORD={{ idm.dip.passwords.odssm if idm.dip is defined else '<SECURE VALUE>' }}

#Provide false if service name is used.
IS_SERVICE_ID_USED={{ idm.config.IS_SERVICE_ID_USED if idm.config.IS_SERVICE_ID_USED is defined else 'false' }}

#Provide true if RAC database URL with instance name is used.
OID_RACDB_URL_WITH_INSTANCE_NAME={{ idm.config.OID_RACDB_URL_WITH_INSTANCE_NAME if idm.config.OID_RACDB_URL_WITH_INSTANCE_NAME is defined else '<SECURE VALUE>' }}
{% endif %}

{% if idm.oid is defined %}
#Enter the full path, listen port, and service name for the database, for example myserver.mycompany.com:1111:mydb1. Separate the path, port, and service name using a colon (:).
OID_DB_INFO={{ rcu.config.oracle_database_hostname if rcu.config.oracle_database_hostname is defined else 'localhost.localdomain' }}:{{ rcu.config.oracle_database_port  if rcu.config.oracle_database_port is defined else '1521' }}:{{ rcu.config.oracle_database_servicename if rcu.config.oracle_database_servicename is defined else 'orcl.vm.nbnco.local' }}

#Provide the database OID schema name.
OID_DB_USER=ODS

#Provide the database ODSSM schema name
ODSSM_DB_USER=ODSSM

#Provide the ODS schema password.
ODS_PASSWORD={{ idm.oid.passwords.ods if idm.oid is defined else '<SECURE VALUE>' }}

#Provide the ODSSM schema password.
ODSSM_PASSWORD={{ idm.oid.passwords.odssm if idm.oid is defined else '<SECURE VALUE>' }}

#Provide false if service name is used.
IS_SERVICE_ID_USED={{ idm.config.IS_SERVICE_ID_USED if idm.config.IS_SERVICE_ID_USED is defined else 'false' }}

#Provide true if RAC database URL with instance name is used.
OID_RACDB_URL_WITH_INSTANCE_NAME={{ idm.config.OID_RACDB_URL_WITH_INSTANCE_NAME if idm.config.OID_RACDB_URL_WITH_INSTANCE_NAME is defined else '<SECURE VALUE>' }}

{% if (idm.oid is defined and ( not idm_config_IS_MASTER ) ) %}
#Provide the Administrator password for Oracle Internet Directory.
OID_ADMIN_PASSWORD={{ idm.oid.passwords.admin if idm.oid is defined else '<SECURE VALUE>' }}
{% endif %}

{% endif %}
